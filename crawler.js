var configDefinition = [
    /*{
            name: "help",
            alias: "h",
            type: Boolean
        },*/
    {
        name: 'apikey',
        alias: 'a',
        type: String,
        defaultValue: "<apikey>",
        description: "The Youtube API key."
    },
    {
        name: 'channels',
        alias: 'c',
        type: String,
        multiple: true,
        defaultValue: [],
        description: "An array of Youtube channel ids."
    }, {
        name: 'endpointuri',
        alias: 'e',
        type: String,
        defaultValue: "",
        description: "The endpoint where the fetched list(s) of video get posted to."
    }
]
/**
 * Utility function; returns the Youtube thumbnail of a video in the highest possible resolution.
 * @param {object} itemThumbnailsObject 
 */
function _getThumbnail(itemThumbnailsObject) {
    return itemThumbnailsObject.hasOwnProperty("maxres") ? itemThumbnailsObject.maxres : (itemThumbnailsObject.hasOwnProperty("standard") ? itemThumbnailsObject.standard : itemThumbnailsObject.default);
}
/**
 * Convert/translate YoutubeÂ´s list of video meta data to intended format.
 * TODO: this should be in another place OR be generated by schema
 * @param {*} videoItems 
 */
function getItemsMeta(videoItems) {
    var metaItems = []
    videoItems.map(function (item) {
        metaItems.push({
            originId: item.id,
            providerName: "Youtube",
            url: "https://www.youtube.com/watch?v=" + item.id,
            title: item.snippet.title,
            description: item.snippet.description || "No Description",
            thumbnail: _getThumbnail(item.snippet.thumbnails).url,
            contentCategory: 'atomic',
            subject: "",
            tags: item.snippet.tags || [],
            mimeType: 'video',
            licenses: [item.status.license]
        })
    })
    return metaItems;
}


module.exports = {
    crawl: function (config,fetcher, fetchCallback) {
        if (this.configValid(config)) {
            _config = config;
            fetcher.fetch({
                apikey: _config.apikey,
                channels: _config.channels
            }, function (videoItems) {
                fetchCallback(getItemsMeta(videoItems));
            })
        } else {
            console.log("config for Youtube crawler not valid!")
        }
    },
    getConfigDefinition: function () {
        return configDefinition;
    },
    getConfigDefault: function () {
        var obj = {}
        configDefinition.map(function (item) {
            if (item.hasOwnProperty("defaultValue")) {
                obj[item.name] = item.defaultValue
            }
        })
        return obj;
    },
    configValid: function (config) {
        var isValid = true;
        configDefinition.map(function (item) {
            if (item.name !== "help") {
                if (!config.hasOwnProperty(item.name)) {
                    config[item.name] = item.defaultValue
                }
                isValid = isValid && (config[item.name] !== item.defaultValue)
            }
        })
        return isValid;
    }
}