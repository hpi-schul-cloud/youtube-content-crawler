/**
 * Note: this crawler sends multiple/chunked metadata items to the callback ("fetchCallback")
 * 
 */
var moment = require('moment');
/**
 * Utility function; returns the Youtube thumbnail of a video in the highest possible resolution.
 * @param {object} itemThumbnailsObject 
 */
function _getThumbnail(itemThumbnailsObject) {
    return itemThumbnailsObject.hasOwnProperty("maxres") ? itemThumbnailsObject.maxres : (itemThumbnailsObject.hasOwnProperty("standard") ? itemThumbnailsObject.standard : itemThumbnailsObject.default);
}
/**
 * Convert/translate YoutubeÂ´s list of video meta data to intended format.
 * TODO: this should be in another place OR be generated by schema
 * @param {*} videoItems 
 */
function _getItemsMeta(videoItems) {
    var metaItems = []
    videoItems.map(function (item) {
        if (item.hasOwnProperty("snippet") && item.hasOwnProperty("status") && item.hasOwnProperty("contentDetails")) {
            //First tag shall always be the title of the channel
            var tags = item.snippet.tags || [];
            tags.unshift("Youtube")
            metaItems.push({
                originId: item.id,
                providerName: "Youtube",
                url: "https://www.youtube.com/watch?v=" + item.id,
                title: item.snippet.title,
                description: item.snippet.description || "No Description",
                thumbnail: _getThumbnail(item.snippet.thumbnails).url,
                contentCategory: 'atomic',
                subject: "",
                tags: tags,
                mimeType: 'video',
                licenses: [item.status.license],
                duration: moment.duration(item.contentDetails.duration).asSeconds()
            })
        }
    })
    return metaItems;
}
module.exports = {
    crawl: function (config, fetcher, fetchCallback) {
        _config = config;
        fetcher.fetch({
            apikey: _config.apikey,
            channels: _config.channels.split(",")
        }, function (videoItems) {
            fetchCallback(_getItemsMeta(videoItems));
        })
    },
    configSpec: {
        apikey: {
            env: "APIKEY",
            type: "string",
            default: "APIKEY as given by Google Youtube API as string"
        },
        channels: {
            env: "CHANNELS",
            type: "string",
            default: "CHANNELS Youtube-Channel-ids separated by ',' as string"
        }
    }
}
